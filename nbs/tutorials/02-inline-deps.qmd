# Using Inline Python Dependencies with Plash

> Learn how to use Python's inline dependency syntax (PEP 723) with Plash. Ideal for single-file apps.

## What are Inline Python Dependencies

Python recently introduced the ability to embed metadata (defined in PEP 723), such as package dependencies, directly within script files using special comment syntax. Plash supports this format when deploying an app.

## Inline Python Dependencies Tutorial

In this tutorial, you'll learn how to use inline Python dependencies when deploying a Plash app.

**Objectives:**

- [ ] Create a simple single file Plash app containing your app's code and dependencies
- [ ] Deploy your app to see this in action

**Prerequisites:**

* A registered account at https://pla.sh
* The Plash CLI installed (run `pip install plash-cli` if needed)
* Logged in via the CLI (run `plash_login` if needed)

### Create a project directory

First, create a directory for your project named `inline-deps` and navigate into it:

```sh
mkdir inline-deps && cd inline-deps
```

### Create your application file

Create your `main.py` file in your project directory with the following complete content:

```python
# /// script
# dependencies = [
#   "python-fasthtml",
# ]
# ///
from fasthtml.common import *

app, rt = fast_app()

@rt
def index():
    return H1("Hello, world!")

serve()
```

Let's break down the special syntax at the top of the file. Outlined in [PEP-723](https://peps.python.org/pep-0723/), you need to specify these special inline metadata tags as top-level comments. Each metadata block starts with `# /// script`. `script` here is a special name used for specifying dependency information. This feature is useful for simple scripts or single-file applications where managing a separate requirements file might be overkill.

For your Python dependencies, you then specify a TOML-compliant syntax array of all your Python script's requirements using the standard requirements syntax for specifying things like versions:

```python
# dependencies = [
#   "python-fasthtml",
# ]
```

Finally, you end the metadata block with the closing triple slashes `# ///`.

âœ… Complete: Create a simple single file Plash app containing your app's code and dependencies

### Deploy your app

Now, deploy your application using the Plash CLI. Open your terminal, navigate to the `inline-deps` directory, and run:

```sh
plash_deploy
```

You'll see:
```
Initializing deployment...
âœ… Upload complete! Your app is currently being built.
It will be live at https://<your-app-id>.pla.sh
```

_(Note: `<your-app-id>` will be replaced with a unique identifier for your specific deployment)._

You can check your app's build logs in real-time or troubleshoot issues using:

```sh
plash_logs --tail
```

**ðŸŽ‰ Complete: Inline Python Dependencies Tutorial**